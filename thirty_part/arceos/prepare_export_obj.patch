diff --git a/Cargo.lock b/Cargo.lock
index 2e2eafd..4d428c1 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -142,8 +142,10 @@ dependencies = [
  "aarch64-cpu",
  "axalloc",
  "axconfig",
+ "axlog",
  "bitflags",
  "cfg-if",
+ "crate_interface",
  "lazy_init",
  "log",
  "memory_addr",
@@ -194,7 +196,6 @@ dependencies = [
  "axlog",
  "axnet",
  "axtask",
- "crate_interface",
 ]
 
 [[package]]
diff --git a/Makefile b/Makefile
index 3392a92..fde7338 100644
--- a/Makefile
+++ b/Makefile
@@ -24,6 +24,8 @@ export PLATFORM
 export MODE
 export LOG
 
+export CARGO_PROFILE_RELEASE_LTO=off
+
 # Paths
 app_package := arceos-$(APP)
 kernel_elf := target/$(target)/$(MODE)/$(app_package)
@@ -45,6 +47,7 @@ endif
 ifeq ($(NET), on)
   features += libax/net
 endif
+features += libax/paging
 
 build_args := --no-default-features --features "$(features)" --target $(target) -Zbuild-std=core,alloc -Zbuild-std-features=compiler-builtins-mem
 ifeq ($(MODE), release)
@@ -90,7 +93,7 @@ build: $(kernel_bin)
 kernel_elf:
 	@echo Arch: $(ARCH), Platform: $(PLATFORM), Language: $(APP_LANG)
 ifeq ($(APP_LANG), rust)
-	cargo build $(build_args)
+	RUSTFLAGS=-Csymbol-mangling-version=v0 cargo build $(build_args)
 else ifeq ($(APP_LANG), c)
 	@rm -f $(kernel_elf)
 	@make -C ulib/c_libax ARCH=$(ARCH) MODE=$(MODE) APP=$(APP) FEATURES="$(features)"
diff --git a/apps/helloworld/src/lib.rs b/apps/helloworld/src/lib.rs
new file mode 100644
index 0000000..850e8a1
--- /dev/null
+++ b/apps/helloworld/src/lib.rs
@@ -0,0 +1,7 @@
+#![no_std]
+#![no_main]
+
+#[no_mangle]
+fn say_hello() {
+    libax::println!("Hello, world!");
+}
diff --git a/apps/memtest/src/lib.rs b/apps/memtest/src/lib.rs
new file mode 100644
index 0000000..9c96958
--- /dev/null
+++ b/apps/memtest/src/lib.rs
@@ -0,0 +1,47 @@
+#![no_std]
+#![no_main]
+
+#[macro_use]
+extern crate libax;
+extern crate alloc;
+
+use alloc::collections::BTreeMap;
+use alloc::vec::Vec;
+use libax::rand;
+
+fn test_vec() {
+    const N: usize = 1_000_000;
+    let mut v = Vec::with_capacity(N);
+    for _ in 0..N {
+        v.push(rand::rand_u32());
+    }
+    v.sort();
+    for i in 0..N - 1 {
+        assert!(v[i] <= v[i + 1]);
+    }
+    println!("test_vec() OK!");
+}
+
+fn test_btree_map() {
+    const N: usize = 10_000;
+    let mut m = BTreeMap::new();
+    for _ in 0..N {
+        let value = rand::rand_u32();
+        let key = alloc::format!("key_{value}");
+        m.insert(key, value);
+    }
+    for (k, v) in m.iter() {
+        if let Some(k) = k.strip_prefix("key_") {
+            assert_eq!(k.parse::<u32>().unwrap(), *v);
+        }
+    }
+    println!("test_btree_map() OK!");
+}
+
+#[no_mangle]
+fn test_memory() {
+    println!("Running memory tests...");
+    test_vec();
+    test_btree_map();
+    println!("Memory tests run OK!");
+}
diff --git a/modules/axhal/Cargo.toml b/modules/axhal/Cargo.toml
index ec4ad42..a8712c7 100644
--- a/modules/axhal/Cargo.toml
+++ b/modules/axhal/Cargo.toml
@@ -22,6 +22,8 @@ cfg-if = "1.0"
 bitflags = "1.3"
 static_assertions = "1.1.0"
 axconfig = { path = "../axconfig" }
+axlog = { path = "../axlog" }
+crate_interface = { path = "../../crates/crate_interface" }
 axalloc = { path = "../axalloc", optional = true }
 ratio = { path = "../../crates/ratio", optional = true }
 lazy_init = { path = "../../crates/lazy_init", optional = true }
diff --git a/modules/axhal/src/lib.rs b/modules/axhal/src/lib.rs
index 45527ad..0545ade 100644
--- a/modules/axhal/src/lib.rs
+++ b/modules/axhal/src/lib.rs
@@ -8,6 +8,9 @@
 #[macro_use]
 extern crate log;
 
+#[macro_use]
+extern crate axlog;
+
 mod platform;
 
 pub mod arch;
@@ -24,3 +27,26 @@ pub mod console {
 pub mod misc {
     pub use super::platform::misc::*;
 }
+
+struct LogIfImpl;
+
+#[crate_interface::impl_interface]
+impl axlog::LogIf for LogIfImpl {
+    fn console_write_str(s: &str) {
+        use crate::console::putchar;
+        for c in s.chars() {
+            match c {
+                '\n' => {
+                    putchar(b'\r');
+                    putchar(b'\n');
+                }
+                _ => putchar(c as u8),
+            }
+        }
+    }
+
+    fn current_time() -> core::time::Duration {
+        crate::time::current_time()
+    }
+}
+
diff --git a/modules/axhal/src/mem.rs b/modules/axhal/src/mem.rs
index 34c57cf..ad064c3 100644
--- a/modules/axhal/src/mem.rs
+++ b/modules/axhal/src/mem.rs
@@ -38,14 +38,22 @@ impl Iterator for MemRegionIter {
     }
 }
 
+extern "C" {
+    fn va_pa_offset();
+}
+
+const fn c_addr_to_rust(addr: usize) -> usize {
+    unsafe { return *(addr as *const usize); }
+}
+
 #[inline]
-pub const fn virt_to_phys(vaddr: VirtAddr) -> PhysAddr {
-    PhysAddr::from(vaddr.as_usize() - axconfig::PHYS_VIRT_OFFSET)
+pub fn virt_to_phys(vaddr: VirtAddr) -> PhysAddr {
+    PhysAddr::from(vaddr.as_usize() - c_addr_to_rust(va_pa_offset as usize))
 }
 
 #[inline]
-pub const fn phys_to_virt(paddr: PhysAddr) -> VirtAddr {
-    VirtAddr::from(paddr.as_usize() + axconfig::PHYS_VIRT_OFFSET)
+pub fn phys_to_virt(paddr: PhysAddr) -> VirtAddr {
+    VirtAddr::from(paddr.as_usize() + c_addr_to_rust(va_pa_offset as usize))
 }
 
 pub fn memory_regions() -> impl Iterator<Item = MemRegion> {
@@ -62,32 +70,32 @@ pub(crate) fn common_memory_region_at(idx: usize) -> Option<MemRegion> {
     let mmio_regions = axconfig::MMIO_REGIONS;
     let r = match idx {
         0 => MemRegion {
-            paddr: virt_to_phys((stext as usize).into()),
-            size: etext as usize - stext as usize,
+            paddr: virt_to_phys((_text_start as usize).into()),
+            size: _text_end as usize - _text_start as usize,
             flags: MemRegionFlags::RESERVED | MemRegionFlags::READ | MemRegionFlags::EXECUTE,
             name: ".text",
         },
         1 => MemRegion {
-            paddr: virt_to_phys((srodata as usize).into()),
-            size: erodata as usize - srodata as usize,
+            paddr: virt_to_phys((_rodata_start as usize).into()),
+            size: _rodata_end as usize - _rodata_start as usize,
             flags: MemRegionFlags::RESERVED | MemRegionFlags::READ,
             name: ".rodata",
         },
         2 => MemRegion {
-            paddr: virt_to_phys((sdata as usize).into()),
-            size: edata as usize - sdata as usize,
+            paddr: virt_to_phys((_data_start as usize).into()),
+            size: _data_end as usize - _data_start as usize,
             flags: MemRegionFlags::RESERVED | MemRegionFlags::READ | MemRegionFlags::WRITE,
             name: ".data",
         },
         3 => MemRegion {
-            paddr: virt_to_phys((sbss as usize).into()),
-            size: ebss as usize - sbss as usize,
+            paddr: virt_to_phys((_bss_start as usize).into()),
+            size: _bss_stop as usize - _bss_start as usize,
             flags: MemRegionFlags::RESERVED | MemRegionFlags::READ | MemRegionFlags::WRITE,
             name: ".bss",
         },
         4 => MemRegion {
-            paddr: virt_to_phys((boot_stack as usize).into()),
-            size: boot_stack_top as usize - boot_stack as usize,
+            paddr: virt_to_phys((_init_stack as usize).into()),
+            size: _init_stack_top as usize - _init_stack as usize,
             flags: MemRegionFlags::RESERVED | MemRegionFlags::READ | MemRegionFlags::WRITE,
             name: "boot stack",
         },
@@ -108,20 +116,20 @@ pub(crate) fn common_memory_region_at(idx: usize) -> Option<MemRegion> {
 #[allow(dead_code)]
 pub(crate) fn clear_bss() {
     unsafe {
-        core::slice::from_raw_parts_mut(sbss as usize as *mut u8, ebss as usize - sbss as usize)
+        core::slice::from_raw_parts_mut(_bss_start as usize as *mut u8, _bss_stop as usize - _bss_start as usize)
             .fill(0);
     }
 }
 
 extern "C" {
-    fn stext();
-    fn etext();
-    fn srodata();
-    fn erodata();
-    fn sdata();
-    fn edata();
-    fn sbss();
-    fn ebss();
-    fn boot_stack();
-    fn boot_stack_top();
+    fn _text_start();
+    fn _text_end();
+    fn _rodata_start();
+    fn _rodata_end();
+    fn _data_start();
+    fn _data_end();
+    fn _bss_start();
+    fn _bss_stop();
+    fn _init_stack();
+    fn _init_stack_top();
 }
diff --git a/modules/axhal/src/platform/qemu_virt_riscv/mem.rs b/modules/axhal/src/platform/qemu_virt_riscv/mem.rs
index 3f8c3e1..9c2c96b 100644
--- a/modules/axhal/src/platform/qemu_virt_riscv/mem.rs
+++ b/modules/axhal/src/platform/qemu_virt_riscv/mem.rs
@@ -4,17 +4,36 @@ pub(crate) fn memory_regions_num() -> usize {
     common_memory_regions_num() + 1
 }
 
+fn c_addr_to_rust(addr: usize) -> usize {
+    unsafe { return *(addr as *const usize); }
+}
+
 pub(crate) fn memory_region_at(idx: usize) -> Option<MemRegion> {
     use core::cmp::Ordering;
     match idx.cmp(&common_memory_regions_num()) {
         Ordering::Less => common_memory_region_at(idx),
         Ordering::Equal => {
             // free memory
+            /*
             extern "C" {
                 fn ekernel();
             }
             let start = virt_to_phys((ekernel as usize).into()).align_up(PAGE_SIZE_4K);
             let end = PhysAddr::from(axconfig::PHYS_MEMORY_END).align_down(PAGE_SIZE_4K);
+            */
+            extern "C" {
+                fn dt_memory_base();
+                fn dt_memory_size();
+                fn kernel_start();
+                fn kernel_size();
+            }
+            let start = c_addr_to_rust(kernel_start as usize) +
+                c_addr_to_rust(kernel_size as usize);
+            let start = PhysAddr::from(start).align_up(PAGE_SIZE_4K);
+            let end = c_addr_to_rust(dt_memory_base as usize) +
+                c_addr_to_rust(dt_memory_size as usize);
+            let end = PhysAddr::from(end).align_down(PAGE_SIZE_4K);
+
             Some(MemRegion {
                 paddr: start,
                 size: end.as_usize() - start.as_usize(),
diff --git a/modules/axhal/src/platform/qemu_virt_riscv/mod.rs b/modules/axhal/src/platform/qemu_virt_riscv/mod.rs
index ec4400b..13177e3 100644
--- a/modules/axhal/src/platform/qemu_virt_riscv/mod.rs
+++ b/modules/axhal/src/platform/qemu_virt_riscv/mod.rs
@@ -1,5 +1,3 @@
-mod boot;
-
 pub mod console;
 pub mod mem;
 pub mod misc;
diff --git a/modules/axruntime/Cargo.toml b/modules/axruntime/Cargo.toml
index 2eb3564..07af799 100644
--- a/modules/axruntime/Cargo.toml
+++ b/modules/axruntime/Cargo.toml
@@ -17,7 +17,6 @@ net = ["alloc", "paging", "axdriver/virtio-net", "dep:axnet"]
 default = []
 
 [dependencies]
-crate_interface = { path = "../../crates/crate_interface" }
 axalloc = { path = "../axalloc", optional = true }
 axconfig = { path = "../axconfig" }
 axdriver = { path = "../axdriver", optional = true }
diff --git a/modules/axruntime/src/lib.rs b/modules/axruntime/src/lib.rs
index 3fd1950..7fc8cc6 100644
--- a/modules/axruntime/src/lib.rs
+++ b/modules/axruntime/src/lib.rs
@@ -17,34 +17,8 @@ const LOGO: &str = r#"
 d88P     888 888      "Y8888P  "Y8888   "Y88888P"   "Y8888P"
 "#;
 
-extern "Rust" {
-    fn main();
-}
-
-struct LogIfImpl;
-
-#[crate_interface::impl_interface]
-impl axlog::LogIf for LogIfImpl {
-    fn console_write_str(s: &str) {
-        use axhal::console::putchar;
-        for c in s.chars() {
-            match c {
-                '\n' => {
-                    putchar(b'\r');
-                    putchar(b'\n');
-                }
-                _ => putchar(c as u8),
-            }
-        }
-    }
-
-    fn current_time() -> core::time::Duration {
-        axhal::time::current_time()
-    }
-}
-
 #[cfg_attr(not(test), no_mangle)]
-pub extern "C" fn rust_main() -> ! {
+pub extern "C" fn rust_main() {
     println!("{}", LOGO);
     println!(
         "\
@@ -65,7 +39,7 @@ pub extern "C" fn rust_main() -> ! {
 
     info!("Found physcial memory regions:");
     for r in axhal::mem::memory_regions() {
-        info!(
+        println!(
             "  [{:x?}, {:x?}) {} ({:?})",
             r.paddr,
             r.paddr + r.size,
@@ -80,10 +54,11 @@ pub extern "C" fn rust_main() -> ! {
         init_allocator();
     }
 
+    //println!("rust_main: step3\n");
     #[cfg(feature = "paging")]
     {
         info!("Initialize kernel page table...");
-        remap_kernel_memory().expect("remap kernel memoy failed");
+        //remap_kernel_memory().expect("remap kernel memoy failed");
     }
 
     #[cfg(any(feature = "fs", feature = "net"))]
@@ -98,15 +73,17 @@ pub extern "C" fn rust_main() -> ! {
         axnet::init_network();
     }
 
+    //println!("rust_main: step6\n");
     #[cfg(feature = "multitask")]
     {
-        info!("Initialize scheduling...");
+        println!("Initialize scheduling...");
         axtask::init_scheduler();
     }
 
-    unsafe { main() };
+    //unsafe { main() };
 
-    axhal::misc::terminate()
+    //axhal::misc::terminate()
+    //println!("rust_main: stepn\n");
 }
 
 #[cfg(feature = "alloc")]
@@ -123,7 +100,9 @@ fn init_allocator() {
     }
     for r in memory_regions() {
         if r.flags.contains(MemRegionFlags::FREE) && r.paddr == max_region_paddr {
+        //println!("init_allocator: step1 {:x}\n", phys_to_virt(r.paddr).as_usize());
             axalloc::global_init(phys_to_virt(r.paddr).as_usize(), r.size);
+        //println!("init_allocator: step2\n");
             break;
         }
     }
