# SPDX-License-Identifier: GPL-2.0
#
# Convenient variables
comma   := ,
quote   := "
squote  := '
empty   :=
space   := $(empty) $(empty)
space_escape := _-_SPACE_-_
pound := \#

###
# Quote a string to pass it to C files. foo => '"foo"'
stringify = $(squote)$(quote)$1$(quote)$(squote)

basetarget = $(basename $(notdir $@))
__modname = $(basetarget)
modname = $(subst $(space),:,$(__modname))
modfile = $(addprefix $(obj)/,$(__modname))

###
# Name of target with a '.' as filename prefix. foo/bar.o => foo/.bar.o
dot-target = $(dir $@).$(notdir $@)

###
# The temporary file to save gcc -MMD generated dependencies must not
# contain a comma
depfile = $(subst $(comma),_,$(dot-target).d)

name-fix-token = $(subst $(comma),_,$(subst -,_,$1))
name-fix = $(call stringify,$(call name-fix-token,$1))

modname_flags = -DKBUILD_MODNAME=$(call name-fix,$(modname))

c_flags = -Wp,-MMD,$(depfile) $(NOSTDINC_FLAGS) $(LINUXINCLUDE) \
         -include $(srctree)/include/linux/compiler_types.h     \
         $(_c_flags) $(modkern_cflags)                          \
         $(basename_flags) $(modname_flags)

CROSS_ := riscv64-linux-gnu-

CC  := $(CROSS_)gcc
CPP := $(CC) -E
AR  := $(CROSS_)ar
LD  := $(CROSS_)ld
NM  := $(CROSS_)nm
READELF := $(CROSS_)readelf

OBJCOPY := $(CROSS_)objcopy
OBJDUMP := $(CROSS_)objdump

SHELL = sh
RUSTC = rustc
BINDGEN = bindgen

export CC CPP AR LD NM READELF OBJCOPY OBJDUMP SHELL RUSTC BINDGEN

MAKE := @make --no-print-directory

OBJCOPYFLAGS := -O binary -R .note -R .note.gnu.build-id -R .comment -S

INCLUDES := -I./include/
AS_FLAGS := -nostdinc -fno-PIE -mabi=lp64 -march=rv64imafdc \
	-fno-stack-protector -mcmodel=medany -D__ASSEMBLY__
CFLAGS := -nostdinc -fno-PIE -mabi=lp64 -march=rv64imafdc \
	-fno-common -fno-stack-protector -mcmodel=medany -D__KERNEL__
LDFLAGS := -melf64lriscv --build-id=none --strip-debug
CC_FLAGS_CFI := -fsanitize=kcfi

export MAKE OBJCOPYFLAGS CC_FLAGS_CFI
export INCLUDES AS_FLAGS CFLAGS LDFLAGS

c_flags = $(modname_flags)

mod_lds := scripts/module.lds
elf_lds := $(obj)/$(elf_lds)
_target := $(if $(target_y), $(obj)/$(target_y), $(obj)/$(obj).ko)
obj_y	:= $(addprefix $(obj)/, $(obj_y))
_test	:= $(obj)/test_$(obj).ko
extra_y := $(addprefix $(obj)/, $(extra_y))
test_y	:= $(filter $(obj)/test%.o, \
	$(patsubst %.c,%.o,$(wildcard $(obj)/*.c)))
_hostprogs := $(addprefix $(obj)/, $(hostprogs_y))

define sed-offsets
    's:^[[:space:]]*\.ascii[[:space:]]*"\(.*\)".*:\1:; \
    /^->/{s:->#\(.*\):/* \1 */:; \
    s:^->\([^ ]*\) [\$$#]*\([^ ]*\) \(.*\):#define \1 \2 /* \3 */:; \
    s:->::; p;}'
endef

define filechk_offsets
     echo "#ifndef $2"; \
     echo "#define $2"; \
     echo "/*"; \
     echo " * DO NOT MODIFY."; \
     echo " *"; \
     echo " * This file was generated by Kbuild"; \
     echo " */"; \
     echo ""; \
     sed -ne $(sed-offsets) < $<; \
     echo ""; \
     echo "#endif"
endef

define filechk
    @set -e; \
    mkdir -p $(dir $@); \
	trap "rm -f $@.tmp" EXIT; \
	{ $(filechk_$(1)); } > $@.tmp; \
	if [ ! -r $@ ] || ! cmp -s $@ $@.tmp; then \
		mv -f $@.tmp $@; \
	fi
endef

$(obj)/%.mod.o: $(obj)/%.mod.c
	@printf "CC\t$<\n"
	@$(CC) $(filter-out $(CC_FLAGS_CFI), $(CFLAGS)) $(c_flags) $(INCLUDES) -c -o $@ $<

$(obj)/%.o: $(obj)/%.c
	@printf "CC\t$<\n"
	@$(CC) $(CFLAGS) $(CFLAGS_$(@F)) $(INCLUDES) -c -o $@ $<

$(obj)/%.lds: $(obj)/%.lds.S
	@printf "AS\t$<\n"
	@$(CPP) $(INCLUDES) -P -Uriscv -D__ASSEMBLY__ -o $@ $<

$(obj)/%.s: $(obj)/%.S
	@printf "CPP\t$<\n"
	@$(CPP) $(AS_FLAGS) $(INCLUDES) -o $@ $<

$(obj)/%.o: $(obj)/%.S
	@printf "AS\t$<\n"
	@$(CC) $(AS_FLAGS) $(INCLUDES) -c -o $@ $<

$(obj)/%.h: $(obj)/%.s
	@printf "GEN\t$@\n"
	$(call filechk,offsets,__ASM_OFFSETS_H__)

$(obj)/%.s: $(obj)/%.c
	@printf "CC\t$<\n"
	@$(CC) $(CFLAGS) $(CFLAGS_$(@F)) $(INCLUDES) -S -o $@ $<

# These flags apply to all Rust code in the tree, including the kernel and
# host programs.
export rust_common_flags := --edition=2021 \
                -Zbinary_dep_depinfo=y \
                -Dunsafe_op_in_unsafe_fn -Drust_2018_idioms \
                -Dunreachable_pub -Dnon_ascii_idents \
                -Wmissing_docs \
                -Drustdoc::missing_crate_level_docs \
                -Dclippy::correctness -Dclippy::style \
                -Dclippy::suspicious -Dclippy::complexity \
                -Dclippy::perf \
                -Dclippy::let_unit_value -Dclippy::mut_mut \
                -Dclippy::needless_bitwise_bool \
                -Dclippy::needless_continue \
                -Wclippy::dbg_macro

KBUILD_RUSTFLAGS := $(rust_common_flags) \
            --target=./rust/target.json \
            -Cpanic=abort -Cembed-bitcode=n -Clto=n \
            -Cforce-unwind-tables=n -Ccodegen-units=1 \
            -Csymbol-mangling-version=v0 \
            -Crelocation-model=static \
            -Zfunction-sections=n \
            -Dclippy::float_arithmetic

KBUILD_RUSTFLAGS += -Copt-level=2

# Always set `debug-assertions` and `overflow-checks` because their default
# depends on `opt-level` and `debug-assertions`, respectively.
KBUILD_RUSTFLAGS += -Cdebug-assertions=n
KBUILD_RUSTFLAGS += -Coverflow-checks=y
KBUILD_RUSTFLAGS += -Cforce-frame-pointers=y
KBUILD_RUSTFLAGS += -Ctarget-cpu=generic-rv64

KBUILD_RUSTFLAGS_MODULE := --cfg MODULE
RUSTFLAGS_MODULE =

modkern_rustflags = $(KBUILD_RUSTFLAGS_MODULE) $(RUSTFLAGS_MODULE)

_rust_flags = $(KBUILD_RUSTFLAGS)
rust_flags = $(_rust_flags) $(modkern_rustflags) @./include/generated/rustc_cfg

# Compile Rust sources (.rs)
# ----------------------------------------------------------

rust_allowed_features := allocator_api,const_refs_to_cell

rust_common_cmd = \
	RUST_MODFILE=$(modfile) $(RUSTC) $(rust_flags) \
	-Zallow-features=$(rust_allowed_features) \
	-Zcrate-attr=no_std \
	-Zcrate-attr='feature($(rust_allowed_features))' \
	--extern alloc --extern kernel \
	--crate-type rlib --out-dir $(obj) -L ./rust/ \
	--crate-name $(basename $(notdir $@))

$(obj)/%.o: $(obj)/%.rs
	@printf "CC\t$<\n"
	@$(rust_common_cmd) --emit=dep-info,obj $<

