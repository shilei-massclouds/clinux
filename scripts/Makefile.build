# SPDX-License-Identifier: GPL-2.0

CROSS_ := riscv64-linux-gnu-

CC  := $(CROSS_)gcc
CPP := $(CC) -E
AR  := $(CROSS_)ar
LD  := $(CROSS_)ld
NM  := $(CROSS_)nm
MAKE := @make --no-print-directory
OBJCOPY := $(CROSS_)objcopy

INCLUDES := -I./include/ -I./target/
CFLAGS := -nostdinc -fno-PIE -mabi=lp64d -march=rv64imafdc \
	-fno-asynchronous-unwind-tables -fno-unwind-tables \
	-fno-common -fno-stack-protector -mcmodel=medany -D__KERNEL__
AS_FLAGS := -nostdinc -fno-PIE -mabi=lp64d -march=rv64imafdc \
	-fno-asynchronous-unwind-tables -fno-unwind-tables \
	-fno-stack-protector -mcmodel=medany -D__ASSEMBLY__
LDFLAGS := -melf64lriscv --build-id=none --strip-debug
OBJCOPYFLAGS := -O binary -R .note -R .note.gnu.build-id -R .comment -S

TARGET_DIR = target/$(obj)
BOOTRD_DIR = target/_bootrd

mod_lds := scripts/module.lds
elf_lds := $(TARGET_DIR)/startup.lds

include $(obj)/Makefile

target_y := $(if $(target_y), \
			$(TARGET_DIR)/$(target_y), \
			$(TARGET_DIR)/$(obj).ko)

obj_y := $(addprefix $(TARGET_DIR)/, $(obj_y))

define sed-offsets
    's:^[[:space:]]*\.ascii[[:space:]]*"\(.*\)".*:\1:; \
    /^->/{s:->#\(.*\):/* \1 */:; \
    s:^->\([^ ]*\) [\$$#]*\([^ ]*\) \(.*\):#define \1 \2 /* \3 */:; \
    s:->::; p;}'
endef

define filechk_offsets
     echo "#ifndef $2"; \
     echo "#define $2"; \
     echo "/*"; \
     echo " * DO NOT MODIFY."; \
     echo " *"; \
     echo " * This file was generated by Kbuild"; \
     echo " */"; \
     echo ""; \
     sed -ne $(sed-offsets) < $<; \
     echo ""; \
     echo "#endif"
endef

define filechk
    @set -e; \
    mkdir -p $(dir $@); \
	trap "rm -f $@.tmp" EXIT; \
	{ $(filechk_$(1)); } > $@.tmp; \
	if [ ! -r $@ ] || ! cmp -s $@ $@.tmp; then \
		mv -f $@.tmp $@; \
	fi
endef

_build: $(target_y)
	@:

$(TARGET_DIR)/$(obj).ko: $(obj_y) $(mod_lds)
	@printf "LD\t$@\n"
	@$(LD) -r $(LDFLAGS) -T $(mod_lds) -o $@ $(obj_y)
	@cp $@ $(BOOTRD_DIR)

$(TARGET_DIR)/$(obj).bin: $(TARGET_DIR)/$(obj).elf $(TARGET_DIR)/$(obj).map
	@$(OBJCOPY) $(OBJCOPYFLAGS) $< $@
	@cp $@ $(BOOTRD_DIR)

$(TARGET_DIR)/$(obj).map: $(TARGET_DIR)/$(obj).elf
	@$(NM) -n $< | \
		grep -v '\( [aNUw] \)\|\(__crc_\)\|\( \$[adt]\)\|\( \.L\)' > $@
	@cp $@ $(BOOTRD_DIR)

$(TARGET_DIR)/$(obj).elf: $(obj_y) $(elf_lds)
	@printf "LD\t$@\n"
	@$(LD) $(LDFLAGS) -T $(elf_lds) -o $@ $(obj_y)

$(TARGET_DIR)/%.o: $(obj)/src/%.c
	@printf "CC\t$<\n"
	@$(CC) $(CFLAGS) $(CFLAGS_$(@F)) $(INCLUDES) -c -o $@ $<

$(elf_lds): $(obj)/src/$(obj).lds.S
	@printf "AS\t$<\n"
	@$(CPP) $(INCLUDES) -P -Uriscv -D__ASSEMBLY__ -o $@ $<

$(TARGET_DIR)/%.o: $(obj)/src/%.S
	@printf "AS\t$<\n"
	@$(CC) $(AS_FLAGS) $(INCLUDES) -c -o $@ $<

$(TARGET_DIR)/%.h: $(TARGET_DIR)/%.s
	@printf "GEN\t$@\n"
	$(call filechk,offsets,__ASM_OFFSETS_H__)

$(TARGET_DIR)/%.s: $(obj)/src/%.c
	@printf "CC\t$<\n"
	@$(CC) $(CFLAGS) $(CFLAGS_$(@F)) $(INCLUDES) -S -o $@ $<

.PHONY: _build
